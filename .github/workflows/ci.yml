name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Smoke checks of the code
  quality-check-and-artifact-build:
    runs-on: ubuntu-latest

    # This job runs only once, on the latest Python version we develop on
    strategy:
      matrix:
        python-version: ["3.12"]
      fail-fast: true # Fail fast if core checks don't pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for License Modifications
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        for pattern in "LICENSE"; do
          if echo "$CHANGED_FILES" | grep -q "$pattern"; then
            echo "::error::One or more license files were modified. License files cannot be changed."
            exit 1 # Fail the workflow step
          fi
        done

        echo "No license files were modified."
      shell: bash

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Cache pip for faster dependency installs

    - name: Install project and development dependencies
      run: |
        python -m pip install --upgrade setuptools
        pip install ".[test]"
        pip install ".[lint]"
        pip install ".[build]"

    - name: Run unit tests with pytest
      run: |
        pytest --cov=mcpartools --cov-report=xml --cov-report=term-missing

    - name: Run pre-commit hooks on changed files and verify
      run: |
        pre-commit run
        git diff --exit-code

    - name: Build wheel for Python ${{ matrix.python-version }}
      run: |
        # Builds the wheel locally in the current runner for this specific Python version
        python -m build --wheel .
        ls -al dist/ # Verify the wheel is created

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mcpartools-wheel
        path: dist/*.whl

    - name: Upload Sample Test Data Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sample-fluka-input
        path: tests/res/sample_fluka.inp

  # Build the package and run integration tests
  test-install-from-artifact:
    runs-on: ubuntu-latest
    needs: quality-check-and-artifact-build

    strategy:
      matrix:
        python-version: [ "3.12" ]
      fail-fast: false # Let all versions run to see if any specific Python version has issues

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Wheel Artifact
        uses: actions/download-artifact@v4
        with:
          name: mcpartools-wheel

      - name: Download Sample Test Data Artifact
        uses: actions/download-artifact@v4
        with:
          name: sample-fluka-input

      - name: Verify downloaded wheel
        run: |
          ls -al mcpartools-*.whl
          ls -al sample_fluka.inp

      - name: Install package from downloaded wheel
        run: |
          # Install the built wheel from the downloaded artifact directory
          pip install mcpartools-*.whl

      - name: Run smoke tests with generatemc
        run: |
          # Execute your functional tests on the installed package
          generatemc --version
          generatemc --help
          generatemc -p 1000 -j 10 -b slurm sample_fluka.inp -w fluka
          ls -al fluka
  build-and-test-zipapp:
    runs-on: ubuntu-latest
    needs: quality-check-and-artifact-build

    # This job runs on a single Python version (typically the latest) to build and test the zipapp
    strategy:
      matrix:
        python-version: [ "3.12" ] # Or the specific Python version you target for your zipapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install build tools for zipapp creation
        run: |
          python -m pip install --upgrade setuptools
          pip install build # 'build' is needed by make_single_executable.sh for the wheel step

      - name: Make and Test Zipapp Executable
        run: |
          chmod +x make_single_executable.sh # Make the script executable
          ./make_single_executable.sh       # Run the script to build and test the zipapp

      - name: Upload Zipapp Executable as Artifact
        # This step makes the .pyz file available if needed for later stages (e.g., release)
        uses: actions/upload-artifact@v4
        with:
          name: generatemc-zipapp
          path: generatemc.pyz
