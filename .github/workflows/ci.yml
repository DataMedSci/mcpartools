name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Smoke checks of the code
  lint-and-unit-test:
    runs-on: ubuntu-latest

    # This job runs only once, on the latest Python version we develop on
    strategy:
      matrix:
        python-version: ["3.12"]
      fail-fast: true # Fail fast if core checks don't pass

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # Cache pip for faster dependency installs

    - name: Install project and development dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        pip install ".[test]"
        pip install ".[lint]"
        pip install check-manifest

    - name: Run unit tests with pytest
      run: |
        pytest --cov=mcpartools --cov-report=xml --cov-report=term-missing
      env:
        # Environment variables
        PYTHONPATH: "."

    - name: Run Flake8 linting
      run: |
        flake8 mcpartools/ tests/

    - name: Run check-manifest (verify package includes all necessary files)
      run: |
        check-manifest --verbose

  # Build the package and run integration tests
  build-and-integration-test:
    runs-on: ubuntu-latest
    needs: lint-and-unit-test # This job will only run if the linting and unit tests pass

    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
      fail-fast: false # Let all versions run to see if any specific Python version has issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache pip for faster dependency installs

      - name: Install build tools and prerequisites
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install ".[build]"

          sudo apt-get update
          sudo apt-get install -qq -y --no-install-recommends wget # For downloading sample_fluka.inp

      - name: Build wheel for Python ${{ matrix.python-version }}
        run: |
          # Builds the wheel locally in the current runner for this specific Python version
          python -m build --wheel .
          ls -al dist/ # Verify the wheel is created

      - name: Install package from local wheel
        run: |
          # Install the just-built wheel into the current environment
          pip install dist/*.whl

      - name: Run smoke tests with generatemc
        run: |
          # Execute your functional tests on the installed package
          generatemc --version
          generatemc --help
          wget https://raw.githubusercontent.com/DataMedSci/mcpartools/master/tests/res/sample_fluka.inp
          generatemc -p 1000 -j 10 -b slurm sample_fluka.inp -w fluka
          ls -al fluka